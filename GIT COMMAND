git version
Displays the installed version of Git.

git init
Initializes a new Git repository in the current directory.

git config --global color.ui auto
Enables helpful colorization of command line output

git config --global user.email "[email address]"
Sets the email you want attached to your commit transactions

git config --global user.name "[name]"
Sets the name you want attached to your commit transactions

git clone <repo path>
Clones a remote repository (repo-demo) into your local machine.

git branch
Shows the current branch.
git branch -r -----> Lists all remote branches
git branch -a  ------> Lists all branches
git branch -m <new-branch-name> -----> Renames the current branch.
git branch -m <old-name> <new-name> -----> To rename a specific branch.
git branch <new-branch> ------> Creates a new branch locally.
git branch -d <branch-name> -----> Deletes the branch safely.
git branch -D <branch-name> ------>Force delete (if not merged yet).

git checkout <branch name> OR git switch <branch-name>
Switches to the master branch.

git merge <branch-name>
Combines the specified branch’s history into the current branch. This is usually done in pull requests.

git remote add origin <URL> 
specifies that we are adding a remote repository, with the specified URL, as an origin to our local Git repo. 

git remote -v
to check remote repository URLs.

git add .
Add all files to the staging area

git commit
This will open your editor where you can type the message.

git commit -m "<Commit message>"
Adds a commit message inline, describing the changes.

git show <commit>
Outputs metadata and content changes of the specified commit Make changes

git diff <first-branch>...<second-branch>
Shows content differences between two branches

git log
Shows the commit history for the current branch

git status
Shows the current status of the Git repository.

git ls-files
Lists files tracked by Git.

git push origin <branch>
Pushes commits from the local branch to the remote branch.

git pull origin <branch>
Fetches changes from the remote branch and merges them into the current branch.

git fetch
Fetches changes from the remote repository without merging them into the current branch.

fetch Vs pull
-------------------------------------------------------------------------------
git fetch -------> Downloads changes from the remote but doesn’t apply them to your branch.
git pull -------> Fetches changes and merges them into the current branch.
---------------------------------------------------------------------------------

git revert <commitId>
(Used to unstage files, discard changes, or undo commits entirely.)
Reverts a specific commit by creating a new commit that undoes the changes.

git reset --soft <commitId>
Soft reset (preserves changes in the staging area and working directory)

git reset --mixed <commitId>
undo all the changes between HEAD and the specified commit

git reset --hard <commitId>
Resets the working directory and index to a specific commit, discarding changes.

git restore <file>
(Useful for reverting unstaged or staged changes without committing.)
Restores a file from the index or another commit.

git revert HEAD --no-edit
(used to undo changes in a shared repository without altering history.)
revert the latest change, and then commit

git revert <oldest-commit>..<latest-commit>
Revert a range of commits

git stash
Temporarily saves your uncommitted changes (both staged and unstaged) and cleans your working directory.

git stash list
Lists all the stashed changes.

git show stash@{0}
Shows the details of the changes in the specified stash.

git stash pop stash@{0}
Applies the changes from the specified stash and removes it from the stash list.

git stash -p
Stashes changes interactively by allowing you to select specific changes (hunks) to stash.

---------------------------------------------------------------------------
** GOLDEN STEPS **

1. git checkout master --> git pull origin master
2. git checkout b1 --> git rebase master
3. Before we do git add/commit --> repeat step 1 and 2 --> git commit
4. push local b1 --> remote b1: git push origin b1
5. create pull request 
